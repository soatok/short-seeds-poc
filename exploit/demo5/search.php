<?php
declare(strict_types=1);
require_once dirname( __DIR__) . '/bootstrap.php';

if (!file_exists(__DIR__ . '/public-keys.json')) {
    die('key pairs not initialized');
}
if ($argc < 2) {
    die('Argument 1 is required (number)');
}
if ($argc < 3) {
    die('Argument 2 is required (number)');
}
$para = (int) $argv[1];
$sampleID = (int) $argv[2];

$start = $stop = microtime(true);
$collider = new Collision32Bit();
$publicKeys = [];
$hexPublicKeys = json_decode(file_get_contents(__DIR__ . '/public-keys.json'), true);
foreach ($hexPublicKeys as $hex) {
    $publicKeys []= sodium_hex2bin($hex);
}

$start = microtime(true);
$steps = 0;
do {
    $result = $collider->findSeedCollisions($publicKeys, $para, false);
    $steps += $result->steps;
    $para += 128;
} while (!$result->found && $para < (1 << 17));

if (is_null($result)) {
    // Signal a failure to GNU Parallel so it doesn't terminate
    exit(256);
}
if (!$result->found) {
    exit(128);
}

$stop = microtime(true);
$json = json_encode([
    'para' => $para,
    'steps' => $steps,
    'sk' => sodium_bin2hex($result->sk),
    'pk' => sodium_bin2hex($result->pk),
    'time' => $stop,
    'elapsed' => ($stop - $start),
], JSON_UNESCAPED_SLASHES);

file_put_contents(__DIR__ . '/samples/poc-' . $sampleID . '.json', $json);
