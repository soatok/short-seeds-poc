<?php
declare(strict_types=1);
require_once dirname( __DIR__) . '/bootstrap.php';

$start = $stop = microtime(true);

// Let's initialize a collider that biases to 32-bit seeds
$collider = new Collision32Bit();
$collider->setMaxSteps(1 << 26);

// Let's ask for 32768 distinct keypairs
$keypairs = $collider->createDistinctKeyPairs(1 << 15);

echo 'Keypairs generated!', PHP_EOL;

// Let's extract the public keys only:
$publicKeys = $collider->extractPublicKeys($keypairs);

// Now let's find a collision with our corpus of public keys:
$result = $collider->findSeedCollisions($publicKeys, 0, false);

if (is_null($result)) {
    die('Failure: We found an internal collision, and failed to batch attack the public keys.');
}

echo 'FOUND IN ', $result->steps, ' STEPS!', PHP_EOL;
echo sodium_bin2hex($result->sk), PHP_EOL;
echo '  ->  ', PHP_EOL;
echo sodium_bin2hex($result->pk), PHP_EOL;
echo PHP_EOL;

$out = '';

foreach ($keypairs as $index => $kp) {
    [$sk, $pk] = $kp;
    $out .= sodium_bin2hex($sk) . "\t->\t" . sodium_bin2hex($pk) . "\n";
    if (hash_equals($result->pk, $pk)) {
        echo 'INPUT KEY AT INDEX ', $index, PHP_EOL;
        echo sodium_bin2hex($sk), PHP_EOL;
        echo '  ->  ', PHP_EOL;
        echo sodium_bin2hex($pk), PHP_EOL;
        $stop = microtime(true);
        echo "\nRuntime: " . number_format($stop - $start, 3) . " seconds.\n";
    }
}

// Let's do a linear search, for comparison:
$start = microtime(true);
$search = $collider->linearSearch($publicKeys);
$stop = microtime(true);

echo "\nLinear search: " . number_format($stop - $start, 3) . " seconds; {$search->steps} steps.\n";
